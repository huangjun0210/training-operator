// +build !ignore_autogenerated

// Copyright 2018 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha2

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJob": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TFJob represents the configuration of signal TFJob",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard object's metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
							},
						},
						"spec": {
							SchemaProps: spec.SchemaProps{
								Description: "Specification of the desired behavior of the TFJob.",
								Ref:         ref("github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobSpec"),
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Most recently observed status of the TFJob. This data may not be up to date. Populated by the system. Read-only.",
								Ref:         ref("github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobStatus"),
							},
						},
					},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobSpec", "github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
		},
		"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobCondition": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TFJobCondition describes the state of the TFJob at a certain point.",
					Properties: map[string]spec.Schema{
						"type": {
							SchemaProps: spec.SchemaProps{
								Description: "Type of TFJob condition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"status": {
							SchemaProps: spec.SchemaProps{
								Description: "Status of the condition, one of True, False, Unknown.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"reason": {
							SchemaProps: spec.SchemaProps{
								Description: "The reason for the condition's last transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"message": {
							SchemaProps: spec.SchemaProps{
								Description: "A human readable message indicating details about the transition.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"lastUpdateTime": {
							SchemaProps: spec.SchemaProps{
								Description: "The last time this condition was updated.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastTransitionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Last time the condition transitioned from one status to another.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"type", "status"},
				},
			},
			Dependencies: []string{
				"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobList": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TFJobList is a list of TFJobs.",
					Properties: map[string]spec.Schema{
						"kind": {
							SchemaProps: spec.SchemaProps{
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"apiVersion": {
							SchemaProps: spec.SchemaProps{
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
								Type:        []string{"string"},
								Format:      "",
							},
						},
						"metadata": {
							SchemaProps: spec.SchemaProps{
								Description: "Standard list metadata.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"),
							},
						},
						"items": {
							SchemaProps: spec.SchemaProps{
								Description: "List of TFJobs.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJob"),
										},
									},
								},
							},
						},
					},
					Required: []string{"items"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJob", "k8s.io/apimachinery/pkg/apis/meta/v1.ListMeta"},
		},
		"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TFJobSpec is a desired state description of the TFJob.",
					Properties: map[string]spec.Schema{
						"tfReplicaSpecs": {
							SchemaProps: spec.SchemaProps{
								Description: "TFReplicaSpecs is map of TFReplicaType and TFReplicaSpec specifies the TF replicas to run. For example,\n  {\n    \"PS\": TFReplicaSpec,\n    \"Worker\": TFReplicaSpec,\n  }",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFReplicaSpec"),
										},
									},
								},
							},
						},
					},
					Required: []string{"tfReplicaSpecs"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFReplicaSpec"},
		},
		"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TFJobStatus represents the current observed state of the TFJob.",
					Properties: map[string]spec.Schema{
						"conditions": {
							SchemaProps: spec.SchemaProps{
								Description: "Conditions is an array of current observed TFJob conditions.",
								Type:        []string{"array"},
								Items: &spec.SchemaOrArray{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobCondition"),
										},
									},
								},
							},
						},
						"tfReplicaStatuses": {
							SchemaProps: spec.SchemaProps{
								Description: "TFReplicaStatuses is map of TFReplicaType and TFReplicaStatus, specifies the status of each TFReplica.",
								Type:        []string{"object"},
								AdditionalProperties: &spec.SchemaOrBool{
									Schema: &spec.Schema{
										SchemaProps: spec.SchemaProps{
											Ref: ref("github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFReplicaStatus"),
										},
									},
								},
							},
						},
						"startTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the TFJob was acknowledged by the TFJob controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"completionTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents time when the TFJob was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
						"lastReconcileTime": {
							SchemaProps: spec.SchemaProps{
								Description: "Represents last time when the TFJob was reconciled. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC.",
								Ref:         ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
							},
						},
					},
					Required: []string{"conditions", "tfReplicaStatuses"},
				},
			},
			Dependencies: []string{
				"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFJobCondition", "github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFReplicaStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
		},
		"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFReplicaSpec": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TFReplicaSpec is a description of the TFReplica",
					Properties: map[string]spec.Schema{
						"replicas": {
							SchemaProps: spec.SchemaProps{
								Description: "Replicas is the desired number of replicas of the given template. If unspecified, defaults to 1.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"template": {
							SchemaProps: spec.SchemaProps{
								Description: "Template is the object that describes the pod that will be created for this TFReplica. We use RestartPolicy in PodTemplateSpec to describe how the containers within the pod should be restarted. Please set this restart policy carefully according to your code.",
								Ref:         ref("k8s.io/api/core/v1.PodTemplateSpec"),
							},
						},
						"restartPolicy": {
							SchemaProps: spec.SchemaProps{
								Description: "Restart policy for all TFReplicas within the TFJob. One of Always, OnFailure, Never and ExitCode. Default to Always.",
								Type:        []string{"string"},
								Format:      "",
							},
						},
					},
				},
			},
			Dependencies: []string{
				"k8s.io/api/core/v1.PodTemplateSpec"},
		},
		"github.com/kubeflow/tf-operator/pkg/apis/tensorflow/v1alpha2.TFReplicaStatus": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: "TFReplicaStatus represents the current observed state of the TFReplica.",
					Properties: map[string]spec.Schema{
						"active": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of actively running pods.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"succeeded": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of pods which reached phase Succeeded.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
						"failed": {
							SchemaProps: spec.SchemaProps{
								Description: "The number of pods which reached phase Failed.",
								Type:        []string{"integer"},
								Format:      "int32",
							},
						},
					},
				},
			},
			Dependencies: []string{},
		},
	}
}
